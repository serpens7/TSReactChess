{"ast":null,"code":"import { Cell } from \"./Cell\";\nimport { Colors } from \"./Colors\";\nimport { Bishop } from \"./figures/Bishop\";\nimport { King } from \"./figures/King\";\nimport { Knight } from \"./figures/Knight\";\nimport { Pawn } from \"./figures/Pawn\";\nimport { Queen } from \"./figures/Queen\";\nimport { Rook } from \"./figures/Rook\";\nexport class Board {\n  constructor() {\n    this.cells = [];\n    this.lostBlackFigures = [];\n    this.lostWhiteFigures = [];\n    this.whiteKing = void 0;\n    this.blackKing = void 0;\n  }\n  isAvailableMove(figure, currentCell, targetCell) {\n    let targetFigure = targetCell.figure;\n    targetCell.figure = figure;\n    figure.cell = targetCell;\n    currentCell.figure = null;\n    let king;\n    if (figure.color === Colors.WHITE) {\n      king = this.whiteKing;\n    } else {\n      king = this.blackKing;\n    }\n    var isKingUnderAttack = this.isCellUnderAttack(king.cell, this.getOppositeColor(king.color));\n    figure.cell = currentCell;\n    currentCell.figure = figure;\n    targetCell.figure = targetFigure;\n    return !isKingUnderAttack;\n  }\n  getOppositeColor(color) {\n    if (color === Colors.WHITE) return Colors.BLACK;\n    if (color === Colors.BLACK) return Colors.WHITE;\n    return Colors.WHITE; //заглушка\n  }\n\n  isCellUnderAttack(targetCell, enemyColor) {\n    for (let i = 0; i < this.cells.length; i++) {\n      let row = this.cells[i];\n      let cellWithCheckFigure = row.find(cell => cell.figure && cell.figure.color === enemyColor && cell.figure.canMove(targetCell));\n      if (cellWithCheckFigure) return true;\n    }\n    return false;\n  }\n  getCell(x, y) {\n    return this.cells[y][x];\n  }\n  initCells() {\n    for (let i = 0; i < 8; i++) {\n      const row = [];\n      for (let j = 0; j < 8; j++) {\n        if ((i + j) % 2 !== 0) {\n          row.push(new Cell(this, j, i, Colors.BLACK, null));\n        } else {\n          row.push(new Cell(this, j, i, Colors.WHITE, null));\n        }\n      }\n      this.cells.push(row);\n    }\n  }\n  addFigures() {\n    this.addBishop();\n    this.addQueen();\n    this.addKing();\n    this.addKnight();\n    this.addRook();\n    this.addPawn();\n  }\n  addLostFigure(figure) {\n    figure.color === Colors.BLACK ? this.lostBlackFigures.push(figure) : this.lostWhiteFigures.push(figure);\n  }\n  getCopyBoard() {\n    const newBoard = new Board();\n    newBoard.cells = this.cells;\n    newBoard.lostWhiteFigures = this.lostWhiteFigures;\n    newBoard.lostBlackFigures = this.lostBlackFigures;\n    newBoard.whiteKing = this.whiteKing;\n    newBoard.blackKing = this.blackKing;\n    return newBoard;\n  }\n  highLightCells(selectedCell) {\n    for (let i = 0; i < this.cells.length; i++) {\n      const row = this.cells[i];\n      for (let j = 0; j < this.cells.length; j++) {\n        var _selectedCell$figure;\n        const target = row[j];\n        target.available = !!(selectedCell !== null && selectedCell !== void 0 && (_selectedCell$figure = selectedCell.figure) !== null && _selectedCell$figure !== void 0 && _selectedCell$figure.canMove(target) && this.isAvailableMove(selectedCell.figure, selectedCell, target));\n      }\n    }\n  }\n  addBishop() {\n    new Bishop(Colors.WHITE, this.getCell(2, 7));\n    new Bishop(Colors.WHITE, this.getCell(5, 7));\n    new Bishop(Colors.BLACK, this.getCell(2, 0));\n    new Bishop(Colors.BLACK, this.getCell(5, 0));\n  }\n  addKing() {\n    this.whiteKing = new King(Colors.WHITE, this.getCell(4, 7));\n    this.blackKing = new King(Colors.BLACK, this.getCell(4, 0));\n    console.log(this.whiteKing);\n    console.log(this.blackKing);\n  }\n  addPawn() {\n    for (let i = 0; i < 8; i++) {\n      new Pawn(Colors.WHITE, this.getCell(i, 6));\n      new Pawn(Colors.BLACK, this.getCell(i, 1));\n    }\n  }\n  addQueen() {\n    new Queen(Colors.WHITE, this.getCell(3, 7));\n    new Queen(Colors.BLACK, this.getCell(3, 0));\n  }\n  addKnight() {\n    new Knight(Colors.WHITE, this.getCell(1, 7));\n    new Knight(Colors.WHITE, this.getCell(6, 7));\n    new Knight(Colors.BLACK, this.getCell(1, 0));\n    new Knight(Colors.BLACK, this.getCell(6, 0));\n  }\n  addRook() {\n    new Rook(Colors.WHITE, this.getCell(0, 7));\n    new Rook(Colors.WHITE, this.getCell(7, 7));\n    new Rook(Colors.BLACK, this.getCell(0, 0));\n    new Rook(Colors.BLACK, this.getCell(7, 0));\n  }\n}","map":{"version":3,"names":["Cell","Colors","Bishop","King","Knight","Pawn","Queen","Rook","Board","constructor","cells","lostBlackFigures","lostWhiteFigures","whiteKing","blackKing","isAvailableMove","figure","currentCell","targetCell","targetFigure","cell","king","color","WHITE","isKingUnderAttack","isCellUnderAttack","getOppositeColor","BLACK","enemyColor","i","length","row","cellWithCheckFigure","find","canMove","getCell","x","y","initCells","j","push","addFigures","addBishop","addQueen","addKing","addKnight","addRook","addPawn","addLostFigure","getCopyBoard","newBoard","highLightCells","selectedCell","_selectedCell$figure","target","available","console","log"],"sources":["/workspaces/chessWithCheck/src/models/Board.ts"],"sourcesContent":["import { Cell } from \"./Cell\";\nimport { Colors } from \"./Colors\";\nimport { Bishop } from \"./figures/Bishop\";\nimport { King } from \"./figures/King\";\nimport { Knight } from \"./figures/Knight\";\nimport { Pawn } from \"./figures/Pawn\";\nimport { Queen } from \"./figures/Queen\";\nimport { Rook } from \"./figures/Rook\";\nimport { Figure } from \"./figures/Figure\";\n\nexport class Board {\n  cells: Cell[][] = [];\n  lostBlackFigures: Figure[] = [];\n  lostWhiteFigures: Figure[] = [];\n\n  whiteKing?: King;\n  blackKing?: King;\n\n  public isAvailableMove(\n    figure: Figure,\n    currentCell: Cell,\n    targetCell: Cell,\n  ): boolean {\n    let targetFigure = targetCell.figure;\n    targetCell.figure = figure;\n    figure.cell = targetCell;\n    currentCell.figure = null;\n    let king: any;\n    if (figure.color === Colors.WHITE) {\n      king = this.whiteKing;\n    } else {\n      king = this.blackKing;\n    }\n    var isKingUnderAttack: boolean = this.isCellUnderAttack(\n      king.cell,\n      this.getOppositeColor(king.color),\n    );\n    figure.cell = currentCell;\n    currentCell.figure = figure;\n    targetCell.figure = targetFigure;\n\n    return !isKingUnderAttack;\n  }\n\n  getOppositeColor(color: Colors) {\n    if (color === Colors.WHITE) return Colors.BLACK;\n    if (color === Colors.BLACK) return Colors.WHITE;\n    return Colors.WHITE; //заглушка\n  }\n\n  public isCellUnderAttack(targetCell: Cell, enemyColor: Colors): boolean {\n    for (let i = 0; i < this.cells.length; i++) {\n      let row = this.cells[i];\n      let cellWithCheckFigure = row.find(\n        (cell) =>\n          cell.figure &&\n          cell.figure.color === enemyColor &&\n          cell.figure.canMove(targetCell),\n      );\n      if (cellWithCheckFigure) return true;\n    }\n    return false;\n  }\n\n  public getCell(x: number, y: number) {\n    return this.cells[y][x];\n  }\n\n  public initCells() {\n    for (let i = 0; i < 8; i++) {\n      const row: Cell[] = [];\n\n      for (let j = 0; j < 8; j++) {\n        if ((i + j) % 2 !== 0) {\n          row.push(new Cell(this, j, i, Colors.BLACK, null));\n        } else {\n          row.push(new Cell(this, j, i, Colors.WHITE, null));\n        }\n      }\n      this.cells.push(row);\n    }\n  }\n\n  public addFigures() {\n    this.addBishop();\n    this.addQueen();\n    this.addKing();\n    this.addKnight();\n    this.addRook();\n    this.addPawn();\n  }\n\n  addLostFigure(figure: Figure) {\n    figure.color === Colors.BLACK\n      ? this.lostBlackFigures.push(figure)\n      : this.lostWhiteFigures.push(figure);\n  }\n\n  public getCopyBoard(): Board {\n    const newBoard = new Board();\n    newBoard.cells = this.cells;\n    newBoard.lostWhiteFigures = this.lostWhiteFigures;\n    newBoard.lostBlackFigures = this.lostBlackFigures;\n    newBoard.whiteKing = this.whiteKing;\n    newBoard.blackKing = this.blackKing;\n    return newBoard;\n  }\n\n  public highLightCells(selectedCell: Cell | null) {\n    for (let i = 0; i < this.cells.length; i++) {\n      const row = this.cells[i];\n      for (let j = 0; j < this.cells.length; j++) {\n        const target = row[j];\n        target.available = !!(\n          selectedCell?.figure?.canMove(target) &&\n          this.isAvailableMove(selectedCell.figure, selectedCell, target)\n        );\n      }\n    }\n  }\n\n  private addBishop() {\n    new Bishop(Colors.WHITE, this.getCell(2, 7));\n    new Bishop(Colors.WHITE, this.getCell(5, 7));\n    new Bishop(Colors.BLACK, this.getCell(2, 0));\n    new Bishop(Colors.BLACK, this.getCell(5, 0));\n  }\n  private addKing() {\n    this.whiteKing = new King(Colors.WHITE, this.getCell(4, 7));\n    this.blackKing = new King(Colors.BLACK, this.getCell(4, 0));\n    console.log(this.whiteKing);\n    console.log(this.blackKing);\n  }\n\n  private addPawn() {\n    for (let i = 0; i < 8; i++) {\n      new Pawn(Colors.WHITE, this.getCell(i, 6));\n      new Pawn(Colors.BLACK, this.getCell(i, 1));\n    }\n  }\n\n  private addQueen() {\n    new Queen(Colors.WHITE, this.getCell(3, 7));\n    new Queen(Colors.BLACK, this.getCell(3, 0));\n  }\n\n  private addKnight() {\n    new Knight(Colors.WHITE, this.getCell(1, 7));\n    new Knight(Colors.WHITE, this.getCell(6, 7));\n    new Knight(Colors.BLACK, this.getCell(1, 0));\n    new Knight(Colors.BLACK, this.getCell(6, 0));\n  }\n\n  private addRook() {\n    new Rook(Colors.WHITE, this.getCell(0, 7));\n    new Rook(Colors.WHITE, this.getCell(7, 7));\n    new Rook(Colors.BLACK, this.getCell(0, 0));\n    new Rook(Colors.BLACK, this.getCell(7, 0));\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
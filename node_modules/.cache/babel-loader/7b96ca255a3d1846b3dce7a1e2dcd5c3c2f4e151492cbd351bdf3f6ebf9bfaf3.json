{"ast":null,"code":"import { Cell } from \"./Cell\";\nimport { Colors } from \"./Colors\";\nimport { Bishop } from \"./figures/Bishop\";\nimport { King } from \"./figures/King\";\nimport { Knight } from \"./figures/Knight\";\nimport { Pawn } from \"./figures/Pawn\";\nimport { Queen } from \"./figures/Queen\";\nimport { Rook } from \"./figures/Rook\";\nexport class Board {\n  constructor() {\n    this.cells = [];\n    this.lostBlackFigures = [];\n    this.lostWhiteFigures = [];\n    this.checkMate = false;\n    this.isPawnWentTwoCellLastTurn = false;\n    this.currentEnPassantFigure = null;\n    this.whiteKing = void 0;\n    this.blackKing = void 0;\n  }\n  isRoqueAvailable(king, rook) {\n    //if (this.isCellUnderAttack(board.getCell(kingCell.x, kingCell.y), kingCell?.figure.color))\n    const direction = king.cell.x - rook.cell.x > 0 ? 1 : -1;\n    if (king.color === rook.color && king.madeAMove === false && rook.madeAMove === false && this.isCellUnderAttack(king.cell, this.getOppositeColor(king.color)) && !this.isCellUnderAttack(this.getCell(king.cell.x + direction, king.cell.y), this.getOppositeColor(king.color)) && !this.isCellUnderAttack(this.getCell(king.cell.x + 2 * direction, king.cell.y), this.getOppositeColor(king.color))) return true;\n    return false;\n  }\n\n  // 1. Взять цвет текущего игрока\n  // 2. Пройтись по всем фигурам этого цвета\n  // 3. Проверить может ли эта фигура хоть куда-то сходить\n  // 4. Если хоть одна может - не checkMate\n\n  isFigureHasAnyMove(figure) {\n    for (let j = 0; j < this.cells.length; j++) {\n      for (let i = 0; i < this.cells.length; i++) {\n        const targetCell = this.getCell(j, i);\n        if (figure !== null && figure !== void 0 && figure.canMove(targetCell) && this.isAvailableMove(figure, figure.cell, targetCell)) return true;\n      }\n    }\n    return false;\n  }\n  checkCheckMate() {\n    for (let k = 0; k < this.cells.length; k++) {\n      for (let i = 0; i < this.cells.length; i++) {\n        const cell = this.getCell(k, i);\n        if (cell.figure && this.isFigureHasAnyMove(cell.figure)) return false;\n      }\n    }\n    console.log(\"bt\");\n    return true;\n  }\n  initCells() {\n    for (let i = 0; i < 8; i++) {\n      const row = [];\n      for (let j = 0; j < 8; j++) {\n        if ((i + j) % 2 !== 0) {\n          row.push(new Cell(this, j, i, Colors.BLACK, null));\n        } else {\n          row.push(new Cell(this, j, i, Colors.WHITE, null));\n        }\n      }\n      this.cells.push(row);\n    }\n  }\n  isAvailableMove(figure, startCell, targetCell) {\n    let targetFigure = targetCell.figure;\n    targetCell.figure = figure;\n    figure.cell = targetCell;\n    startCell.figure = null;\n    let king;\n    if (figure.color === Colors.WHITE) {\n      king = this.whiteKing;\n    } else {\n      king = this.blackKing;\n    }\n    var isKingUnderAttack = this.isCellUnderAttack(king.cell, this.getOppositeColor(king.color));\n    figure.cell = startCell;\n    startCell.figure = figure;\n    targetCell.figure = targetFigure;\n    return !isKingUnderAttack;\n  }\n  getOppositeColor(color) {\n    if (color === Colors.WHITE) return Colors.BLACK;\n    if (color === Colors.BLACK) return Colors.WHITE;\n    return Colors.WHITE; //заглушка\n  }\n\n  isCellUnderAttack(targetCell, enemyColor) {\n    for (let i = 0; i < this.cells.length; i++) {\n      let row = this.cells[i];\n      let cellWithCheckFigure = row.find(cell => cell.figure && cell.figure.color === enemyColor && cell.figure.canMove(targetCell));\n      if (cellWithCheckFigure) return true;\n    }\n    return false;\n  }\n  getCell(x, y) {\n    return this.cells[y][x];\n  }\n  getCopyBoard() {\n    const newBoard = new Board();\n    newBoard.checkMate = this.checkMate;\n    newBoard.cells = this.cells;\n    newBoard.lostWhiteFigures = this.lostWhiteFigures;\n    newBoard.lostBlackFigures = this.lostBlackFigures;\n    newBoard.whiteKing = this.whiteKing;\n    newBoard.blackKing = this.blackKing;\n    return newBoard;\n  }\n  highLightCells(selectedCell) {\n    for (let i = 0; i < this.cells.length; i++) {\n      const row = this.cells[i];\n      for (let j = 0; j < this.cells.length; j++) {\n        var _selectedCell$figure;\n        const target = row[j];\n        target.available = !!(selectedCell !== null && selectedCell !== void 0 && (_selectedCell$figure = selectedCell.figure) !== null && _selectedCell$figure !== void 0 && _selectedCell$figure.canMove(target) && this.isAvailableMove(selectedCell.figure, selectedCell, target));\n      }\n    }\n  }\n  addLostFigure(figure) {\n    figure.color === Colors.BLACK ? this.lostBlackFigures.push(figure) : this.lostWhiteFigures.push(figure);\n  }\n  addFigures() {\n    this.addQueen();\n    this.addKing();\n    this.addKnight();\n    this.addRook();\n    this.addBishop();\n    this.addPawn();\n  }\n  addBishop() {\n    new Bishop(Colors.WHITE, this.getCell(2, 7), this);\n    new Bishop(Colors.WHITE, this.getCell(5, 7), this);\n    new Bishop(Colors.BLACK, this.getCell(2, 0), this);\n    new Bishop(Colors.BLACK, this.getCell(5, 0), this);\n  }\n  addKing() {\n    this.whiteKing = new King(Colors.WHITE, this.getCell(4, 7), this, false);\n    this.blackKing = new King(Colors.BLACK, this.getCell(4, 0), this, false);\n  }\n  addPawn() {\n    for (let i = 0; i < 8; i++) {\n      new Pawn(Colors.WHITE, this.getCell(i, 6), this);\n      new Pawn(Colors.BLACK, this.getCell(i, 1), this);\n    }\n  }\n  addQueen() {\n    new Queen(Colors.WHITE, this.getCell(3, 7), this);\n    new Queen(Colors.BLACK, this.getCell(3, 0), this);\n  }\n  addKnight() {\n    new Knight(Colors.WHITE, this.getCell(1, 7), this);\n    new Knight(Colors.WHITE, this.getCell(6, 7), this);\n    new Knight(Colors.BLACK, this.getCell(1, 0), this);\n    new Knight(Colors.BLACK, this.getCell(6, 0), this);\n  }\n  addRook() {\n    new Rook(Colors.WHITE, this.getCell(0, 7), this, false);\n    new Rook(Colors.WHITE, this.getCell(7, 7), this, false);\n    new Rook(Colors.BLACK, this.getCell(0, 0), this, false);\n    new Rook(Colors.BLACK, this.getCell(7, 0), this, false);\n  }\n}","map":{"version":3,"names":["Cell","Colors","Bishop","King","Knight","Pawn","Queen","Rook","Board","constructor","cells","lostBlackFigures","lostWhiteFigures","checkMate","isPawnWentTwoCellLastTurn","currentEnPassantFigure","whiteKing","blackKing","isRoqueAvailable","king","rook","direction","cell","x","color","madeAMove","isCellUnderAttack","getOppositeColor","getCell","y","isFigureHasAnyMove","figure","j","length","i","targetCell","canMove","isAvailableMove","checkCheckMate","k","console","log","initCells","row","push","BLACK","WHITE","startCell","targetFigure","isKingUnderAttack","enemyColor","cellWithCheckFigure","find","getCopyBoard","newBoard","highLightCells","selectedCell","_selectedCell$figure","target","available","addLostFigure","addFigures","addQueen","addKing","addKnight","addRook","addBishop","addPawn"],"sources":["C:/Users/jar50/Desktop/chessWithCheck-main/src/models/Board.ts"],"sourcesContent":["import { Cell } from \"./Cell\";\nimport { Colors } from \"./Colors\";\nimport { Bishop } from \"./figures/Bishop\";\nimport { King } from \"./figures/King\";\nimport { Knight } from \"./figures/Knight\";\nimport { Pawn } from \"./figures/Pawn\";\nimport { Queen } from \"./figures/Queen\";\nimport { Rook } from \"./figures/Rook\";\nimport { Figure } from \"./figures/Figure\";\nimport checkMateChecker from \"./checkMateChecker\";\n\nexport class Board {\n  cells: Cell[][] = [];\n  lostBlackFigures: Figure[] = [];\n  lostWhiteFigures: Figure[] = [];\n  checkMate: boolean = false;\n  isPawnWentTwoCellLastTurn: boolean = false;\n  currentEnPassantFigure = null;\n\n  whiteKing?: King;\n  blackKing?: King;\n\n  isRoqueAvailable(king: any, rook: any): boolean {\n    //if (this.isCellUnderAttack(board.getCell(kingCell.x, kingCell.y), kingCell?.figure.color))\n    const direction = king.cell.x - rook.cell.x > 0 ? 1 : -1;\n    if (\n      king.color === rook.color &&\n      king.madeAMove === false &&\n      rook.madeAMove === false &&\n      this.isCellUnderAttack(king.cell, this.getOppositeColor(king.color)) &&\n      !this.isCellUnderAttack(\n        this.getCell(king.cell.x + direction, king.cell.y),\n        this.getOppositeColor(king.color)\n      ) &&\n      !this.isCellUnderAttack(\n        this.getCell(king.cell.x + 2 * direction, king.cell.y),\n        this.getOppositeColor(king.color)\n      )\n    )\n      return true;\n    return false;\n  }\n\n  // 1. Взять цвет текущего игрока\n  // 2. Пройтись по всем фигурам этого цвета\n  // 3. Проверить может ли эта фигура хоть куда-то сходить\n  // 4. Если хоть одна может - не checkMate\n\n  isFigureHasAnyMove(figure: Figure): boolean {\n    for (let j = 0; j < this.cells.length; j++) {\n      for (let i = 0; i < this.cells.length; i++) {\n        const targetCell = this.getCell(j, i);\n        if (\n          figure?.canMove(targetCell) &&\n          this.isAvailableMove(figure, figure.cell, targetCell)\n        )\n          return true;\n      }\n    }\n    return false;\n  }\n\n  checkCheckMate(this: Board): boolean {\n    for (let k = 0; k < this.cells.length; k++) {\n      for (let i = 0; i < this.cells.length; i++) {\n        const cell = this.getCell(k, i);\n        if (cell.figure && this.isFigureHasAnyMove(cell.figure)) return false;\n      }\n    }\n    console.log(\"bt\");\n    return true;\n  }\n\n  public initCells() {\n    for (let i = 0; i < 8; i++) {\n      const row: Cell[] = [];\n      for (let j = 0; j < 8; j++) {\n        if ((i + j) % 2 !== 0) {\n          row.push(new Cell(this, j, i, Colors.BLACK, null));\n        } else {\n          row.push(new Cell(this, j, i, Colors.WHITE, null));\n        }\n      }\n      this.cells.push(row);\n    }\n  }\n\n  public isAvailableMove(\n    figure: Figure,\n    startCell: Cell,\n    targetCell: Cell\n  ): boolean {\n    let targetFigure = targetCell.figure;\n    targetCell.figure = figure;\n    figure.cell = targetCell;\n    startCell.figure = null;\n    let king: any;\n    if (figure.color === Colors.WHITE) {\n      king = this.whiteKing;\n    } else {\n      king = this.blackKing;\n    }\n    var isKingUnderAttack: boolean = this.isCellUnderAttack(\n      king.cell,\n      this.getOppositeColor(king.color)\n    );\n    figure.cell = startCell;\n    startCell.figure = figure;\n    targetCell.figure = targetFigure;\n\n    return !isKingUnderAttack;\n  }\n\n  getOppositeColor(color: Colors) {\n    if (color === Colors.WHITE) return Colors.BLACK;\n    if (color === Colors.BLACK) return Colors.WHITE;\n    return Colors.WHITE; //заглушка\n  }\n\n  public isCellUnderAttack(targetCell: Cell, enemyColor: Colors): boolean {\n    for (let i = 0; i < this.cells.length; i++) {\n      let row = this.cells[i];\n      let cellWithCheckFigure = row.find(\n        (cell) =>\n          cell.figure &&\n          cell.figure.color === enemyColor &&\n          cell.figure.canMove(targetCell)\n      );\n      if (cellWithCheckFigure) return true;\n    }\n    return false;\n  }\n\n  public getCell(x: number, y: number) {\n    return this.cells[y][x];\n  }\n\n  public getCopyBoard(): Board {\n    const newBoard = new Board();\n    newBoard.checkMate = this.checkMate;\n    newBoard.cells = this.cells;\n    newBoard.lostWhiteFigures = this.lostWhiteFigures;\n    newBoard.lostBlackFigures = this.lostBlackFigures;\n    newBoard.whiteKing = this.whiteKing;\n    newBoard.blackKing = this.blackKing;\n\n    return newBoard;\n  }\n\n  public highLightCells(selectedCell: Cell | null) {\n    for (let i = 0; i < this.cells.length; i++) {\n      const row = this.cells[i];\n      for (let j = 0; j < this.cells.length; j++) {\n        const target = row[j];\n        target.available = !!(\n          selectedCell?.figure?.canMove(target) &&\n          this.isAvailableMove(selectedCell.figure, selectedCell, target)\n        );\n      }\n    }\n  }\n\n  addLostFigure(figure: Figure) {\n    figure.color === Colors.BLACK\n      ? this.lostBlackFigures.push(figure)\n      : this.lostWhiteFigures.push(figure);\n  }\n\n  public addFigures() {\n    this.addQueen();\n    this.addKing();\n    this.addKnight();\n    this.addRook();\n    this.addBishop();\n    this.addPawn();\n  }\n\n  private addBishop() {\n    new Bishop(Colors.WHITE, this.getCell(2, 7), this);\n    new Bishop(Colors.WHITE, this.getCell(5, 7), this);\n    new Bishop(Colors.BLACK, this.getCell(2, 0), this);\n    new Bishop(Colors.BLACK, this.getCell(5, 0), this);\n  }\n  private addKing() {\n    this.whiteKing = new King(Colors.WHITE, this.getCell(4, 7), this, false);\n    this.blackKing = new King(Colors.BLACK, this.getCell(4, 0), this, false);\n  }\n\n  private addPawn() {\n    for (let i = 0; i < 8; i++) {\n      new Pawn(Colors.WHITE, this.getCell(i, 6), this);\n      new Pawn(Colors.BLACK, this.getCell(i, 1), this);\n    }\n  }\n\n  private addQueen() {\n    new Queen(Colors.WHITE, this.getCell(3, 7), this);\n    new Queen(Colors.BLACK, this.getCell(3, 0), this);\n  }\n\n  private addKnight() {\n    new Knight(Colors.WHITE, this.getCell(1, 7), this);\n    new Knight(Colors.WHITE, this.getCell(6, 7), this);\n    new Knight(Colors.BLACK, this.getCell(1, 0), this);\n    new Knight(Colors.BLACK, this.getCell(6, 0), this);\n  }\n\n  private addRook() {\n    new Rook(Colors.WHITE, this.getCell(0, 7), this, false);\n    new Rook(Colors.WHITE, this.getCell(7, 7), this, false);\n    new Rook(Colors.BLACK, this.getCell(0, 0), this, false);\n    new Rook(Colors.BLACK, this.getCell(7, 0), this, false);\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
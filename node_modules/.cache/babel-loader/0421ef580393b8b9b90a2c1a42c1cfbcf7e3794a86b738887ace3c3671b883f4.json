{"ast":null,"code":"import { Colors } from \"../Colors\";\nimport { Figure, FigureNames } from \"./Figure\";\nimport blackLogo from \"../../assets/black-pawn.png\";\nimport whiteLogo from \"../../assets/white-pawn.png\";\nexport class Pawn extends Figure {\n  constructor(color, cell, board) {\n    var _this$cell$figure;\n    super(color, cell, board);\n    this.direction = ((_this$cell$figure = this.cell.figure) === null || _this$cell$figure === void 0 ? void 0 : _this$cell$figure.color) === Colors.BLACK ? 1 : -1;\n    this.alreadyMadeAMove = false;\n    this.name = FigureNames.PAWN;\n    this.logo = color === Colors.BLACK ? blackLogo : whiteLogo;\n  }\n  enPassant(target) {\n    let leftPassant = this.cell.board.getCell(this.cell.x - 1, this.cell.y);\n    let rightPassant = this.cell.board.getCell(this.cell.x + 1, this.cell.y);\n    const passantCondition = n => {\n      var _n$figure, _n$figure2;\n      if (n.figure && ((_n$figure = n.figure) === null || _n$figure === void 0 ? void 0 : _n$figure.color) !== this.color && ((_n$figure2 = n.figure) === null || _n$figure2 === void 0 ? void 0 : _n$figure2.name) === FigureNames.PAWN) {\n        return true;\n      }\n      return false;\n    };\n    if (this.board.isPawnWentTwoCellLastTurn === true && target.y === this.cell.y + this.direction && (target.x === this.cell.x - 1 && passantCondition(leftPassant) || target.x === this.cell.x + 1 && passantCondition(rightPassant))) {\n      return true;\n    }\n    return false;\n  }\n  canMove(target) {\n    var _this$cell$figure2;\n    if (!super.canMove(target)) return false;\n    const firstStepDirection = ((_this$cell$figure2 = this.cell.figure) === null || _this$cell$figure2 === void 0 ? void 0 : _this$cell$figure2.color) === Colors.BLACK ? 2 : -2;\n    if ((target.y === this.cell.y + this.direction || !this.alreadyMadeAMove && target.y === this.cell.y + firstStepDirection) && target.x === this.cell.x && this.cell.board.getCell(target.x, target.y).isEmpty()) {\n      return true; //пешка идет\n    }\n\n    if (target.y === this.cell.y + this.direction && (target.x === this.cell.x + 1 || target.x === this.cell.x - 1) && this.cell.isEnemy(target)) return true; //пешка ест\n\n    if (this.enPassant(target)) {\n      return true; //взятие на проходе\n    }\n\n    return false;\n  }\n  moveFigure(target) {\n    super.moveFigure(target);\n    this.alreadyMadeAMove = true; //условие для шага на 2 клетки\n\n    if (Math.abs(this.cell.y - target.y) === 2) {\n      this.board.isPawnWentTwoCellLastTurn = true;\n    } else this.board.isPawnWentTwoCellLastTurn = false; //условие для взятия на проходе\n\n    if (Math.abs(target.x - this.cell.x) === 1 && !target.figure) {\n      this.cell.board.getCell(target.x, target.y - this.direction).figure = null; //взятие на проходе\n    }\n  }\n}","map":{"version":3,"names":["Colors","Figure","FigureNames","blackLogo","whiteLogo","Pawn","constructor","color","cell","board","_this$cell$figure","direction","figure","BLACK","alreadyMadeAMove","name","PAWN","logo","enPassant","target","leftPassant","getCell","x","y","rightPassant","passantCondition","n","_n$figure","_n$figure2","isPawnWentTwoCellLastTurn","canMove","_this$cell$figure2","firstStepDirection","isEmpty","isEnemy","moveFigure","Math","abs"],"sources":["C:/Users/jar50/Desktop/chessWithCheck/src/models/figures/Pawn.ts"],"sourcesContent":["import { Cell } from \"../Cell\";\nimport { Colors } from \"../Colors\";\nimport { Figure, FigureNames } from \"./Figure\";\nimport blackLogo from \"../../assets/black-pawn.png\";\nimport whiteLogo from \"../../assets/white-pawn.png\";\nimport { Board } from \"../Board\";\nimport BoardComponent from \"../../components/BoardComponent\";\n\nexport class Pawn extends Figure {\n  direction = this.cell.figure?.color === Colors.BLACK ? 1 : -1;\n  alreadyMadeAMove: boolean = false;\n\n  constructor(color: Colors, cell: Cell, board: Board) {\n    super(color, cell, board);\n    this.name = FigureNames.PAWN;\n    this.logo = color === Colors.BLACK ? blackLogo : whiteLogo;\n  }\n\n  enPassant(target: Cell) {\n    let leftPassant = this.cell.board.getCell(this.cell.x - 1, this.cell.y);\n    let rightPassant = this.cell.board.getCell(this.cell.x + 1, this.cell.y);\n\n    const passantCondition = (n: Cell) => {\n      if (\n        n.figure &&\n        n.figure?.color !== this.color &&\n        n.figure?.name === FigureNames.PAWN\n      ) {\n        return true;\n      }\n      return false;\n    };\n    if (\n      this.board.isPawnWentTwoCellLastTurn === true &&\n      target.y === this.cell.y + this.direction &&\n      ((target.x === this.cell.x - 1 && passantCondition(leftPassant)) ||\n        (target.x === this.cell.x + 1 && passantCondition(rightPassant)))\n    ) {\n      return true;\n    }\n\n    return false;\n  }\n\n  canMove(target: Cell): boolean {\n    if (!super.canMove(target)) return false;\n\n    const firstStepDirection =\n      this.cell.figure?.color === Colors.BLACK ? 2 : -2;\n\n    if (\n      (target.y === this.cell.y + this.direction ||\n        (!this.alreadyMadeAMove &&\n          target.y === this.cell.y + firstStepDirection)) &&\n      target.x === this.cell.x &&\n      this.cell.board.getCell(target.x, target.y).isEmpty()\n    ) {\n      return true; //пешка идет\n    }\n\n    if (\n      target.y === this.cell.y + this.direction &&\n      (target.x === this.cell.x + 1 || target.x === this.cell.x - 1) &&\n      this.cell.isEnemy(target)\n    )\n      return true; //пешка ест\n\n    if (this.enPassant(target)) {\n      return true; //взятие на проходе\n    }\n    return false;\n  }\n\n  moveFigure(target: Cell) {\n    super.moveFigure(target);\n    this.alreadyMadeAMove = true; //условие для шага на 2 клетки\n\n    if (Math.abs(this.cell.y - target.y) === 2) {\n      this.board.isPawnWentTwoCellLastTurn = true;\n    } else this.board.isPawnWentTwoCellLastTurn = false; //условие для взятия на проходе\n\n    if (Math.abs(target.x - this.cell.x) === 1 && !target.figure) {\n      this.cell.board.getCell(target.x, target.y - this.direction).figure =\n        null; //взятие на проходе\n    }\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
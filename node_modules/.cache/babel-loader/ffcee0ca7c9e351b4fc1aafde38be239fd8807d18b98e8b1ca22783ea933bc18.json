{"ast":null,"code":"import { FigureNames } from \"./figures/Figure\";\nimport { Queen } from \"./figures/Queen\";\nimport { Colors } from \"./Colors\";\nexport class Cell {\n  // для реакт ключей\n\n  constructor(board, x, y, color, figure) {\n    this.x = void 0;\n    this.y = void 0;\n    this.color = void 0;\n    this.figure = void 0;\n    this.board = void 0;\n    this.available = void 0;\n    //можно ли переместить фигуру\n    this.id = void 0;\n    this.x = x;\n    this.y = y;\n    this.color = color;\n    this.figure = figure;\n    this.board = board;\n    this.available = false;\n    this.id = Math.random();\n  }\n  moveFigure(target) {\n    var _this$figure;\n    if (this.figure && (_this$figure = this.figure) !== null && _this$figure !== void 0 && _this$figure.canMove(target)) {\n      this.figure.moveFigure(target);\n      if (target.figure) {\n        this.board.addLostFigure(target.figure);\n      }\n      target.setFigureForLoop(this.figure, target);\n      this.pawnToQueenCheck(target);\n      this.figure = null;\n    }\n  }\n  pawnToQueenCheck(target) {\n    var _this$figure2;\n    let xColor = null;\n    if (((_this$figure2 = this.figure) === null || _this$figure2 === void 0 ? void 0 : _this$figure2.name) === FigureNames.PAWN && (target.y === 0 || target.y === 7)) {\n      if (this.figure.color === Colors.BLACK) {\n        xColor = Colors.BLACK;\n      } else {\n        xColor = Colors.WHITE;\n      }\n      new Queen(xColor, target, this.board);\n    }\n  }\n  setFigureForLoop(figure, target) {\n    this.figure = figure;\n    this.figure.cell = this;\n  }\n  //кольцевая зависимость. Рефакторинг?\n\n  isEmpty() {\n    return this.figure === null;\n  }\n  isEnemy(target) {\n    if (target.figure) {\n      var _this$figure3;\n      return ((_this$figure3 = this.figure) === null || _this$figure3 === void 0 ? void 0 : _this$figure3.color) !== target.figure.color;\n    }\n    return false;\n  }\n  isEmptyVertical(target) {\n    if (this.x !== target.x) {\n      return false;\n    }\n    const min = Math.min(this.y, target.y);\n    const max = Math.max(this.y, target.y);\n    for (let y = min + 1; y < max; y++) {\n      if (!this.board.getCell(this.x, y).isEmpty()) {\n        return false;\n      }\n    }\n    return true;\n  }\n  isEmptyHorizontal(target) {\n    if (this.y !== target.y) {\n      return false;\n    }\n    const min = Math.min(this.x, target.x);\n    const max = Math.max(this.x, target.x);\n    for (let x = min + 1; x < max; x++) {\n      if (!this.board.getCell(x, this.y).isEmpty()) {\n        return false;\n      }\n    }\n    return true;\n  }\n  isEmptyDiagonal(target) {\n    const absX = Math.abs(target.x - this.x);\n    const absY = Math.abs(target.y - this.y);\n    if (absX !== absY) return false;\n    const dy = this.y < target.y ? 1 : -1;\n    const dx = this.x < target.x ? 1 : -1;\n    for (let i = 1; i < absY; i++) {\n      if (!this.board.getCell(this.x + dx * i, this.y + dy * i).isEmpty()) return false;\n    }\n    return true;\n  }\n}","map":{"version":3,"names":["FigureNames","Queen","Colors","Cell","constructor","board","x","y","color","figure","available","id","Math","random","moveFigure","target","_this$figure","canMove","addLostFigure","setFigureForLoop","pawnToQueenCheck","_this$figure2","xColor","name","PAWN","BLACK","WHITE","cell","isEmpty","isEnemy","_this$figure3","isEmptyVertical","min","max","getCell","isEmptyHorizontal","isEmptyDiagonal","absX","abs","absY","dy","dx","i"],"sources":["C:/Users/jar50/Desktop/chessWithCheck-main/src/models/Cell.ts"],"sourcesContent":["import { Figure, FigureNames } from \"./figures/Figure\";\nimport { Queen } from \"./figures/Queen\";\nimport { Pawn } from \"./figures/Pawn\";\nimport { Board } from \"./Board\";\nimport { Colors } from \"./Colors\";\nimport { Player } from \"./Player\";\n\nexport class Cell {\n  readonly x: number;\n  readonly y: number;\n  readonly color: Colors;\n  figure: Figure | null;\n  board: Board;\n  available: boolean; //можно ли переместить фигуру\n  id: number; // для реакт ключей\n\n  constructor(\n    board: Board,\n    x: number,\n    y: number,\n    color: Colors,\n    figure: Figure | null\n  ) {\n    this.x = x;\n    this.y = y;\n    this.color = color;\n    this.figure = figure;\n    this.board = board;\n    this.available = false;\n    this.id = Math.random();\n  }\n\n  moveFigure(target: Cell) {\n    if (this.figure && this.figure?.canMove(target)) {\n      this.figure.moveFigure(target);\n      if (target.figure) {\n        this.board.addLostFigure(target.figure);\n      }\n      target.setFigureForLoop(this.figure, target);\n      this.pawnToQueenCheck(target);\n      this.figure = null;\n    }\n  }\n  pawnToQueenCheck(target: Cell): void {\n    let xColor = null;\n    if (\n      this.figure?.name === FigureNames.PAWN &&\n      (target.y === 0 || target.y === 7)\n    ) {\n      if (this.figure.color === Colors.BLACK) {\n        xColor = Colors.BLACK;\n      } else {\n        xColor = Colors.WHITE;\n      }\n      new Queen(xColor, target, this.board);\n    }\n  }\n\n  setFigureForLoop(figure: Figure, target: Cell) {\n    this.figure = figure;\n    this.figure.cell = this;\n  }\n  //кольцевая зависимость. Рефакторинг?\n\n  isEmpty(): boolean {\n    return this.figure === null;\n  }\n\n  isEnemy(target: Cell): boolean {\n    if (target.figure) {\n      return this.figure?.color !== target.figure.color;\n    }\n    return false;\n  }\n\n  isEmptyVertical(target: Cell) {\n    if (this.x !== target.x) {\n      return false;\n    }\n\n    const min = Math.min(this.y, target.y);\n    const max = Math.max(this.y, target.y);\n\n    for (let y = min + 1; y < max; y++) {\n      if (!this.board.getCell(this.x, y).isEmpty()) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  isEmptyHorizontal(target: Cell) {\n    if (this.y !== target.y) {\n      return false;\n    }\n\n    const min = Math.min(this.x, target.x);\n    const max = Math.max(this.x, target.x);\n\n    for (let x = min + 1; x < max; x++) {\n      if (!this.board.getCell(x, this.y).isEmpty()) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  isEmptyDiagonal(target: Cell) {\n    const absX = Math.abs(target.x - this.x);\n    const absY = Math.abs(target.y - this.y);\n    if (absX !== absY) return false;\n\n    const dy = this.y < target.y ? 1 : -1;\n    const dx = this.x < target.x ? 1 : -1;\n\n    for (let i = 1; i < absY; i++) {\n      if (!this.board.getCell(this.x + dx * i, this.y + dy * i).isEmpty())\n        return false;\n    }\n    return true;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
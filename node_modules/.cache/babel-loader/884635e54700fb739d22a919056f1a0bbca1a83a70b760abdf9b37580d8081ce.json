{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jar50\\\\Desktop\\\\chessWithCheck-main\\\\src\\\\components\\\\BoardComponent.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from \"react\";\nimport CellComponent from \"./CellComponent\";\nimport { Colors } from \"../models/Colors\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BoardComponent = ({\n  board,\n  setBoard,\n  currentPlayer,\n  swapPlayer,\n  setSelectedCell,\n  selectedCell\n}) => {\n  _s();\n  function click(cell) {\n    var _selectedCell$figure;\n    if (selectedCell && selectedCell !== cell && (_selectedCell$figure = selectedCell.figure) !== null && _selectedCell$figure !== void 0 && _selectedCell$figure.canMove(cell)) {\n      if (!board.isAvailableMove(selectedCell.figure, selectedCell, cell)) return;\n      selectedCell === null || selectedCell === void 0 ? void 0 : selectedCell.moveFigure(cell);\n      swapPlayer();\n      setSelectedCell(null);\n      updateBoard();\n    } else {\n      var _cell$figure;\n      if (((_cell$figure = cell.figure) === null || _cell$figure === void 0 ? void 0 : _cell$figure.color) === (currentPlayer === null || currentPlayer === void 0 ? void 0 : currentPlayer.color)) setSelectedCell(cell);\n    }\n    if (selectedCell) {\n      setSelectedCell(null);\n    }\n    if (selectedCell === null && !cell.figure) {\n      setSelectedCell(null);\n    }\n  }\n  useEffect(() => {\n    highLightCells();\n  }, [selectedCell]);\n  function highLightCells() {\n    board.highLightCells(selectedCell);\n    updateBoard();\n  }\n  function updateBoard() {\n    const newBoard = board.getCopyBoard();\n    setBoard(newBoard);\n    if (newBoard.checkCheckMate(currentPlayer && currentPlayer.color)) {\n      newBoard.checkMate = true;\n      console.log(\"мааат?!\");\n    }\n    //форсапдейт компонента\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board\",\n      children: board.cells.map((row, index) => /*#__PURE__*/_jsxDEV(React.Fragment, {\n        children: row.map(cell => /*#__PURE__*/_jsxDEV(CellComponent, {\n          click: click,\n          cell: cell,\n          selected: cell.x === (selectedCell === null || selectedCell === void 0 ? void 0 : selectedCell.x) && cell.y === (selectedCell === null || selectedCell === void 0 ? void 0 : selectedCell.y)\n        }, cell.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 15\n        }, this))\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"right-side\",\n      children: [\"\\u0425\\u043E\\u0434 \", (currentPlayer === null || currentPlayer === void 0 ? void 0 : currentPlayer.color) === Colors.WHITE ? \"белых\" : \"черных\", \" \\u0444\\u0438\\u0433\\u0443\\u0440\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 5\n  }, this);\n};\n_s(BoardComponent, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = BoardComponent;\nexport default BoardComponent;\nvar _c;\n$RefreshReg$(_c, \"BoardComponent\");","map":{"version":3,"names":["React","useEffect","CellComponent","Colors","jsxDEV","_jsxDEV","BoardComponent","board","setBoard","currentPlayer","swapPlayer","setSelectedCell","selectedCell","_s","click","cell","_selectedCell$figure","figure","canMove","isAvailableMove","moveFigure","updateBoard","_cell$figure","color","highLightCells","newBoard","getCopyBoard","checkCheckMate","checkMate","console","log","children","className","cells","map","row","index","Fragment","selected","x","y","id","fileName","_jsxFileName","lineNumber","columnNumber","WHITE","_c","$RefreshReg$"],"sources":["C:/Users/jar50/Desktop/chessWithCheck-main/src/components/BoardComponent.tsx"],"sourcesContent":["import React, { FC, useContext, useEffect, useMemo, useState } from \"react\";\nimport { Board } from \"../models/Board\";\nimport CellComponent from \"./CellComponent\";\nimport { Cell } from \"../models/Cell\";\nimport { Player } from \"../models/Player\";\nimport { Colors } from \"../models/Colors\";\nimport checkMateChecker from \"../models/checkMateChecker\";\n\ninterface BoardProps {\n  board: Board;\n  setBoard: (board: Board) => void;\n  currentPlayer: Player | null;\n  swapPlayer: () => void;\n  setSelectedCell: (cell: Cell | null) => void;\n  selectedCell: Cell | null;\n}\n\nconst BoardComponent: FC<BoardProps> = ({\n  board,\n  setBoard,\n  currentPlayer,\n  swapPlayer,\n  setSelectedCell,\n  selectedCell,\n}) => {\n  function click(cell: Cell) {\n    if (\n      selectedCell &&\n      selectedCell !== cell &&\n      selectedCell.figure?.canMove(cell)\n    ) {\n      if (!board.isAvailableMove(selectedCell.figure, selectedCell, cell))\n        return;\n      selectedCell?.moveFigure(cell);\n      swapPlayer();\n      setSelectedCell(null);\n      updateBoard();\n    } else {\n      if (cell.figure?.color === currentPlayer?.color) setSelectedCell(cell);\n    }\n    if (selectedCell) {\n      setSelectedCell(null);\n    }\n    if (selectedCell === null && !cell.figure) {\n      setSelectedCell(null);\n    }\n  }\n\n  useEffect(() => {\n    highLightCells();\n  }, [selectedCell]);\n\n  function highLightCells() {\n    board.highLightCells(selectedCell);\n    updateBoard();\n  }\n\n  function updateBoard() {\n    const newBoard = board.getCopyBoard();\n    setBoard(newBoard);\n    if (newBoard.checkCheckMate(currentPlayer && currentPlayer.color)) {\n      newBoard.checkMate = true;\n      console.log(\"мааат?!\");\n    }\n    //форсапдейт компонента\n  }\n\n  return (\n    <div>\n      <div className=\"board\">\n        {board.cells.map((row, index) => (\n          <React.Fragment key={index}>\n            {row.map((cell) => (\n              <CellComponent\n                click={click}\n                cell={cell}\n                key={cell.id}\n                selected={\n                  cell.x === selectedCell?.x && cell.y === selectedCell?.y\n                }\n              />\n            ))}\n          </React.Fragment>\n        ))}\n      </div>\n      <h2 className=\"right-side\">\n        Ход {currentPlayer?.color === Colors.WHITE ? \"белых\" : \"черных\"} фигур\n      </h2>\n    </div>\n  );\n};\n\nexport default BoardComponent;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import { Cell } from \"./Cell\";\nimport { Colors } from \"./Colors\";\nimport { Bishop } from \"./figures/Bishop\";\nimport { King } from \"./figures/King\";\nimport { Knight } from \"./figures/Knight\";\nimport { Pawn } from \"./figures/Pawn\";\nimport { Queen } from \"./figures/Queen\";\nimport { Rook } from \"./figures/Rook\";\nexport class Board {\n  constructor() {\n    this.cells = [];\n    this.lostBlackFigures = [];\n    this.lostWhiteFigures = [];\n    this.whiteKing = void 0;\n    this.blackKing = void 0;\n  }\n  initCells() {\n    for (let i = 0; i < this.cells.length; i++) {\n      const row = [];\n      for (let j = 0; j < this.cells.length; j++) {\n        if ((i + j) % 2 !== 0) {\n          row.push(new Cell(this, j, i, Colors.BLACK, null));\n        } else {\n          row.push(new Cell(this, j, i, Colors.WHITE, null));\n        }\n      }\n      this.cells.push(row);\n    }\n  }\n  isAvailableMove(figure, currentCell, targetCell) {\n    let targetFigure = targetCell.figure;\n    targetCell.figure = figure;\n    figure.cell = targetCell;\n    currentCell.figure = null;\n    let king;\n    if (figure.color === Colors.WHITE) {\n      king = this.whiteKing;\n    } else {\n      king = this.blackKing;\n    }\n    var isKingUnderAttack = this.isCellUnderAttack(king.cell, this.getOppositeColor(king.color));\n    figure.cell = currentCell;\n    currentCell.figure = figure;\n    targetCell.figure = targetFigure;\n    return !isKingUnderAttack;\n  }\n  isRoqueAvailable(king, rook) {\n    //if (this.isCellUnderAttack(board.getCell(kingCell.x, kingCell.y), kingCell?.figure.color))\n    const direction = king.cell.x - rook.cell.x > 0 ? 1 : -1;\n    if (king.color === rook.color && king.madeAMove === false && rook.madeAMove === false && this.isCellUnderAttack(king.cell, this.getOppositeColor(king.color)) && this.isCellUnderAttack(this.getCell(king.cell.x + direction, king.cell.y), this.getOppositeColor(king.color)) && this.isCellUnderAttack(this.getCell(king.cell.x + 2 * direction, king.cell.y), this.getOppositeColor(king.color))) return true;\n    return false;\n  }\n  getOppositeColor(color) {\n    if (color === Colors.WHITE) return Colors.BLACK;\n    if (color === Colors.BLACK) return Colors.WHITE;\n    return Colors.WHITE; //заглушка\n  }\n\n  isCellUnderAttack(targetCell, enemyColor) {\n    for (let i = 0; i < this.cells.length; i++) {\n      let row = this.cells[i];\n      let cellWithCheckFigure = row.find(cell => cell.figure && cell.figure.color === enemyColor && cell.figure.canMove(targetCell));\n      if (cellWithCheckFigure) return true;\n    }\n    return false;\n  }\n  getCell(x, y) {\n    return this.cells[y][x];\n  }\n  getCopyBoard() {\n    const newBoard = new Board();\n    newBoard.cells = this.cells;\n    newBoard.lostWhiteFigures = this.lostWhiteFigures;\n    newBoard.lostBlackFigures = this.lostBlackFigures;\n    newBoard.whiteKing = this.whiteKing;\n    newBoard.blackKing = this.blackKing;\n    return newBoard;\n  }\n  highLightCells(selectedCell) {\n    for (let i = 0; i < this.cells.length; i++) {\n      const row = this.cells[i];\n      for (let j = 0; j < this.cells.length; j++) {\n        var _selectedCell$figure;\n        const target = row[j];\n        target.available = !!(selectedCell !== null && selectedCell !== void 0 && (_selectedCell$figure = selectedCell.figure) !== null && _selectedCell$figure !== void 0 && _selectedCell$figure.canMove(target) && this.isAvailableMove(selectedCell.figure, selectedCell, target));\n        // if (target.available === null) console.log(\"мат!\");\n      }\n    }\n  }\n\n  addLostFigure(figure) {\n    figure.color === Colors.BLACK ? this.lostBlackFigures.push(figure) : this.lostWhiteFigures.push(figure);\n  }\n  addFigures() {\n    this.addBishop();\n    this.addQueen();\n    this.addKing();\n    this.addKnight();\n    this.addRook();\n    this.addPawn();\n  }\n  addBishop() {\n    new Bishop(Colors.WHITE, this.getCell(2, 7), this);\n    new Bishop(Colors.WHITE, this.getCell(5, 7), this);\n    new Bishop(Colors.BLACK, this.getCell(2, 0), this);\n    new Bishop(Colors.BLACK, this.getCell(5, 0), this);\n  }\n  addKing() {\n    this.whiteKing = new King(Colors.WHITE, this.getCell(4, 7), this, false);\n    this.blackKing = new King(Colors.BLACK, this.getCell(4, 0), this, false);\n  }\n  addPawn() {\n    for (let i = 0; i < 8; i++) {\n      new Pawn(Colors.WHITE, this.getCell(i, 6), this);\n      new Pawn(Colors.BLACK, this.getCell(i, 1), this);\n    }\n  }\n  addQueen() {\n    new Queen(Colors.WHITE, this.getCell(3, 7), this);\n    new Queen(Colors.BLACK, this.getCell(3, 0), this);\n  }\n  addKnight() {\n    new Knight(Colors.WHITE, this.getCell(1, 7), this);\n    new Knight(Colors.WHITE, this.getCell(6, 7), this);\n    new Knight(Colors.BLACK, this.getCell(1, 0), this);\n    new Knight(Colors.BLACK, this.getCell(6, 0), this);\n  }\n  addRook() {\n    new Rook(Colors.WHITE, this.getCell(0, 7), this, false);\n    new Rook(Colors.WHITE, this.getCell(7, 7), this, false);\n    new Rook(Colors.BLACK, this.getCell(0, 0), this, false);\n    new Rook(Colors.BLACK, this.getCell(7, 0), this, false);\n  }\n}","map":{"version":3,"names":["Cell","Colors","Bishop","King","Knight","Pawn","Queen","Rook","Board","constructor","cells","lostBlackFigures","lostWhiteFigures","whiteKing","blackKing","initCells","i","length","row","j","push","BLACK","WHITE","isAvailableMove","figure","currentCell","targetCell","targetFigure","cell","king","color","isKingUnderAttack","isCellUnderAttack","getOppositeColor","isRoqueAvailable","rook","direction","x","madeAMove","getCell","y","enemyColor","cellWithCheckFigure","find","canMove","getCopyBoard","newBoard","highLightCells","selectedCell","_selectedCell$figure","target","available","addLostFigure","addFigures","addBishop","addQueen","addKing","addKnight","addRook","addPawn"],"sources":["/workspaces/chessWithCheck/src/models/Board.ts"],"sourcesContent":["import { Cell } from \"./Cell\";\nimport { Colors } from \"./Colors\";\nimport { Bishop } from \"./figures/Bishop\";\nimport { King } from \"./figures/King\";\nimport { Knight } from \"./figures/Knight\";\nimport { Pawn } from \"./figures/Pawn\";\nimport { Queen } from \"./figures/Queen\";\nimport { Rook } from \"./figures/Rook\";\nimport { Figure } from \"./figures/Figure\";\n\nexport class Board {\n  cells: Cell[][] = [];\n  lostBlackFigures: Figure[] = [];\n  lostWhiteFigures: Figure[] = [];\n\n  whiteKing?: King;\n  blackKing?: King;\n\n  public initCells() {\n    for (let i = 0; i < this.cells.length; i++) {\n      const row: Cell[] = [];\n      for (let j = 0; j < this.cells.length; j++) {\n        if ((i + j) % 2 !== 0) {\n          row.push(new Cell(this, j, i, Colors.BLACK, null));\n        } else {\n          row.push(new Cell(this, j, i, Colors.WHITE, null));\n        }\n      }\n      this.cells.push(row);\n    }\n  }\n\n  public isAvailableMove(\n    figure: Figure,\n    currentCell: Cell,\n    targetCell: Cell,\n  ): boolean {\n    let targetFigure = targetCell.figure;\n    targetCell.figure = figure;\n    figure.cell = targetCell;\n    currentCell.figure = null;\n    let king: any;\n    if (figure.color === Colors.WHITE) {\n      king = this.whiteKing;\n    } else {\n      king = this.blackKing;\n    }\n    var isKingUnderAttack: boolean = this.isCellUnderAttack(\n      king.cell,\n      this.getOppositeColor(king.color),\n    );\n    figure.cell = currentCell;\n    currentCell.figure = figure;\n    targetCell.figure = targetFigure;\n\n    return !isKingUnderAttack;\n  }\n\n  isRoqueAvailable(king: any, rook: any): boolean {\n    //if (this.isCellUnderAttack(board.getCell(kingCell.x, kingCell.y), kingCell?.figure.color))\n    const direction = king.cell.x - rook.cell.x > 0 ? 1 : -1;\n    if (\n      king.color === rook.color &&\n      king.madeAMove === false &&\n      rook.madeAMove === false &&\n      this.isCellUnderAttack(king.cell, this.getOppositeColor(king.color)) &&\n      this.isCellUnderAttack(\n        this.getCell(king.cell.x + direction, king.cell.y),\n        this.getOppositeColor(king.color),\n      ) &&\n      this.isCellUnderAttack(\n        this.getCell(king.cell.x + 2 * direction, king.cell.y),\n        this.getOppositeColor(king.color),\n      )\n    )\n      return true;\n    return false;\n  }\n\n  getOppositeColor(color: Colors) {\n    if (color === Colors.WHITE) return Colors.BLACK;\n    if (color === Colors.BLACK) return Colors.WHITE;\n    return Colors.WHITE; //заглушка\n  }\n\n  public isCellUnderAttack(targetCell: Cell, enemyColor: Colors): boolean {\n    for (let i = 0; i < this.cells.length; i++) {\n      let row = this.cells[i];\n      let cellWithCheckFigure = row.find(\n        (cell) =>\n          cell.figure &&\n          cell.figure.color === enemyColor &&\n          cell.figure.canMove(targetCell),\n      );\n      if (cellWithCheckFigure) return true;\n    }\n    return false;\n  }\n\n  public getCell(x: number, y: number) {\n    return this.cells[y][x];\n  }\n\n  public getCopyBoard(): Board {\n    const newBoard = new Board();\n    newBoard.cells = this.cells;\n    newBoard.lostWhiteFigures = this.lostWhiteFigures;\n    newBoard.lostBlackFigures = this.lostBlackFigures;\n    newBoard.whiteKing = this.whiteKing;\n    newBoard.blackKing = this.blackKing;\n    return newBoard;\n  }\n\n  public highLightCells(selectedCell: Cell | null) {\n    for (let i = 0; i < this.cells.length; i++) {\n      const row = this.cells[i];\n      for (let j = 0; j < this.cells.length; j++) {\n        const target = row[j];\n        target.available = !!(\n          selectedCell?.figure?.canMove(target) &&\n          this.isAvailableMove(selectedCell.figure, selectedCell, target)\n        );\n        // if (target.available === null) console.log(\"мат!\");\n      }\n    }\n  }\n\n  addLostFigure(figure: Figure) {\n    figure.color === Colors.BLACK\n      ? this.lostBlackFigures.push(figure)\n      : this.lostWhiteFigures.push(figure);\n  }\n\n  public addFigures() {\n    this.addBishop();\n    this.addQueen();\n    this.addKing();\n    this.addKnight();\n    this.addRook();\n    this.addPawn();\n  }\n\n  private addBishop() {\n    new Bishop(Colors.WHITE, this.getCell(2, 7), this);\n    new Bishop(Colors.WHITE, this.getCell(5, 7), this);\n    new Bishop(Colors.BLACK, this.getCell(2, 0), this);\n    new Bishop(Colors.BLACK, this.getCell(5, 0), this);\n  }\n  private addKing() {\n    this.whiteKing = new King(Colors.WHITE, this.getCell(4, 7), this, false);\n    this.blackKing = new King(Colors.BLACK, this.getCell(4, 0), this, false);\n  }\n\n  private addPawn() {\n    for (let i = 0; i < 8; i++) {\n      new Pawn(Colors.WHITE, this.getCell(i, 6), this);\n      new Pawn(Colors.BLACK, this.getCell(i, 1), this);\n    }\n  }\n\n  private addQueen() {\n    new Queen(Colors.WHITE, this.getCell(3, 7), this);\n    new Queen(Colors.BLACK, this.getCell(3, 0), this);\n  }\n\n  private addKnight() {\n    new Knight(Colors.WHITE, this.getCell(1, 7), this);\n    new Knight(Colors.WHITE, this.getCell(6, 7), this);\n    new Knight(Colors.BLACK, this.getCell(1, 0), this);\n    new Knight(Colors.BLACK, this.getCell(6, 0), this);\n  }\n\n  private addRook() {\n    new Rook(Colors.WHITE, this.getCell(0, 7), this, false);\n    new Rook(Colors.WHITE, this.getCell(7, 7), this, false);\n    new Rook(Colors.BLACK, this.getCell(0, 0), this, false);\n    new Rook(Colors.BLACK, this.getCell(7, 0), this, false);\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}